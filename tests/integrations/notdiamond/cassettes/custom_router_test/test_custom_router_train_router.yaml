interactions:
- request:
    body: "--21c23e61c4a26fe7ca057b8bd9cf1f60\r\nContent-Disposition: form-data; name=\"language\"\r\n\r\nen\r\n--21c23e61c4a26fe7ca057b8bd9cf1f60\r\nContent-Disposition:
      form-data; name=\"llm_providers\"\r\n\r\n[{\"provider\": \"anthropic\", \"model\":
      \"claude-3-5-sonnet-20240620\", \"is_custom\": false, \"context_length\": null,
      \"input_price\": null, \"output_price\": null, \"latency\": null}, {\"provider\":
      \"openai\", \"model\": \"gpt-4o-2024-05-13\", \"is_custom\": false, \"context_length\":
      null, \"input_price\": null, \"output_price\": null, \"latency\": null}, {\"provider\":
      \"google\", \"model\": \"gemini-1.5-pro-latest\", \"is_custom\": false, \"context_length\":
      null, \"input_price\": null, \"output_price\": null, \"latency\": null}, {\"provider\":
      \"openai\", \"model\": \"gpt-4-turbo-2024-04-09\", \"is_custom\": false, \"context_length\":
      null, \"input_price\": null, \"output_price\": null, \"latency\": null}, {\"provider\":
      \"anthropic\", \"model\": \"claude-3-opus-20240229\", \"is_custom\": false,
      \"context_length\": null, \"input_price\": null, \"output_price\": null, \"latency\":
      null}]\r\n--21c23e61c4a26fe7ca057b8bd9cf1f60\r\nContent-Disposition: form-data;
      name=\"prompt_column\"\r\n\r\nprompt\r\n--21c23e61c4a26fe7ca057b8bd9cf1f60\r\nContent-Disposition:
      form-data; name=\"maximize\"\r\n\r\nTrue\r\n--21c23e61c4a26fe7ca057b8bd9cf1f60\r\nContent-Disposition:
      form-data; name=\"dataset_file\"; filename=\"tmp_rlycpea.csv\"\r\n\r\nprompt,anthropic/claude-3-5-sonnet-20240620/response,anthropic/claude-3-5-sonnet-20240620/score,openai/gpt-4o-2024-05-13/response,openai/gpt-4o-2024-05-13/score,google/gemini-1.5-pro-latest/response,google/gemini-1.5-pro-latest/score,openai/gpt-4-turbo-2024-04-09/response,openai/gpt-4-turbo-2024-04-09/score,anthropic/claude-3-opus-20240229/response,anthropic/claude-3-opus-20240229/score\n\"from
      typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold:
      float) -> bool:\n    \"\"\"\"\"\" Check if in given list of numbers, are any
      two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0,
      2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0,
      5.0, 2.0], 0.3)\n    True\n    \"\"\"\"\"\"\n\",\"    for idx, elem in enumerate(numbers):\n
      \       for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n
      \               distance = abs(elem - elem2)\n                if distance <
      threshold:\n                    return True\n\n    return False\n\",1,\"    for
      idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n
      \           if idx != idx2:\n                distance = abs(elem - elem2)\n
      \               if distance < threshold:\n                    return True\n\n
      \   return False\n\",1,\"    for idx, elem in enumerate(numbers):\n        for
      idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance
      = abs(elem - elem2)\n                if distance < threshold:\n                    return
      True\n\n    return False\n\",1,\"    for idx, elem in enumerate(numbers):\n
      \       for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n
      \               distance = abs(elem - elem2)\n                if distance <
      threshold:\n                    return True\n\n    return False\n\",1,\"    for
      idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n
      \           if idx != idx2:\n                distance = abs(elem - elem2)\n
      \               if distance < threshold:\n                    return True\n\n
      \   return False\n\",1\n\"from typing import List\n\n\ndef separate_paren_groups(paren_string:
      str) -> List[str]:\n    \"\"\"\"\"\" Input to this function is a string containing
      multiple groups of nested parentheses. Your goal is to\n    separate those group
      into separate strings and return the list of those.\n    Separate groups are
      balanced (each open brace is properly closed) and not nested within each other\n
      \   Ignore any spaces in the input string.\n    >>> separate_paren_groups('(
      ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\"\"\"\n\",\"    result
      = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n
      \       if c == '(':\n            current_depth += 1\n            current_string.append(c)\n
      \       elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n
      \           if current_depth == 0:\n                result.append(''.join(current_string))\n
      \               current_string.clear()\n\n    return result\n\",1,\"    result
      = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n
      \       if c == '(':\n            current_depth += 1\n            current_string.append(c)\n
      \       elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n
      \           if current_depth == 0:\n                result.append(''.join(current_string))\n
      \               current_string.clear()\n\n    return result\n\",1,\"    result
      = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n
      \       if c == '(':\n            current_depth += 1\n            current_string.append(c)\n
      \       elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n
      \           if current_depth == 0:\n                result.append(''.join(current_string))\n
      \               current_string.clear()\n\n    return result\n\",1,\"    result
      = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n
      \       if c == '(':\n            current_depth += 1\n            current_string.append(c)\n
      \       elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n
      \           if current_depth == 0:\n                result.append(''.join(current_string))\n
      \               current_string.clear()\n\n    return result\n\",1,\"    result
      = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n
      \       if c == '(':\n            current_depth += 1\n            current_string.append(c)\n
      \       elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n
      \           if current_depth == 0:\n                result.append(''.join(current_string))\n
      \               current_string.clear()\n\n    return result\n\",1\n\"\n\ndef
      truncate_number(number: float) -> float:\n    \"\"\"\"\"\" Given a positive
      floating point number, it can be decomposed into\n    and integer part (largest
      integer smaller than given number) and decimals\n    (leftover part always smaller
      than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n
      \   0.5\n    \"\"\"\"\"\"\n\",\"    return number % 1.0\n\",1,\"    return number
      % 1.0\n\",1,\"    return number % 1.0\n\",1,\"    return number % 1.0\n\",1,\"
      \   return number % 1.0\n\",1\n\"from typing import List\n\n\ndef below_zero(operations:
      List[int]) -> bool:\n    \"\"\"\"\"\" You're given a list of deposit and withdrawal
      operations on a bank account that starts with\n    zero balance. Your task is
      to detect if at any point the balance of account fallls below zero, and\n    at
      that point function should return True. Otherwise it should return False.\n
      \   >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n
      \   True\n    \"\"\"\"\"\"\n\",\"    balance = 0\n\n    for op in operations:\n
      \       balance += op\n        if balance < 0:\n            return True\n\n
      \   return False\n\",1,\"    balance = 0\n\n    for op in operations:\n        balance
      += op\n        if balance < 0:\n            return True\n\n    return False\n\",1,\"
      \   balance = 0\n\n    for op in operations:\n        balance += op\n        if
      balance < 0:\n            return True\n\n    return False\n\",1,\"    balance
      = 0\n\n    for op in operations:\n        balance += op\n        if balance
      < 0:\n            return True\n\n    return False\n\",1,\"    balance = 0\n\n
      \   for op in operations:\n        balance += op\n        if balance < 0:\n
      \           return True\n\n    return False\n\",1\n\"from typing import List\n\n\ndef
      mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\"\"\" For
      a given list of input numbers, calculate Mean Absolute Deviation\n    around
      the mean of this dataset.\n    Mean Absolute Deviation is the average absolute
      difference between each\n    element and a centerpoint (mean in this case):\n
      \   MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0,
      3.0, 4.0])\n    1.0\n    \"\"\"\"\"\"\n\",\"    mean = sum(numbers) / len(numbers)\n
      \   return sum(abs(x - mean) for x in numbers) / len(numbers)\n\",1,\"    mean
      = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers)
      / len(numbers)\n\",1,\"    mean = sum(numbers) / len(numbers)\n    return sum(abs(x
      - mean) for x in numbers) / len(numbers)\n\",1,\"    mean = sum(numbers) / len(numbers)\n
      \   return sum(abs(x - mean) for x in numbers) / len(numbers)\n\",1,\"    mean
      = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers)
      / len(numbers)\n\",1\n\"from typing import List\n\n\ndef intersperse(numbers:
      List[int], delimeter: int) -> List[int]:\n    \"\"\"\"\"\" Insert a number 'delimeter'
      between every two consecutive elements of input list `numbers'\n    >>> intersperse([],
      4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\"\"\"\n\",\"
      \   if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n
      \       result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n
      \   return result\n\",1,\"    if not numbers:\n        return []\n\n    result
      = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n
      \   result.append(numbers[-1])\n\n    return result\n\",1,\"    if not numbers:\n
      \       return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n
      \       result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return
      result\n\",1,\"    if not numbers:\n        return []\n\n    result = []\n\n
      \   for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n
      \   result.append(numbers[-1])\n\n    return result\n\",1,\"    if not numbers:\n
      \       return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n
      \       result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return
      result\n\",1\n\"from typing import List\n\n\ndef parse_nested_parens(paren_string:
      str) -> List[int]:\n    \"\"\"\"\"\" Input to this function is a string represented
      multiple groups for nested parentheses separated by spaces.\n    For each of
      the group, output the deepest level of nesting of parentheses.\n    E.g. (()())
      has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())
      ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\"\"\"\n\",\"    def parse_paren_group(s):\n
      \       depth = 0\n        max_depth = 0\n        for c in s:\n            if
      c == '(':\n                depth += 1\n                max_depth = max(depth,
      max_depth)\n            else:\n                depth -= 1\n\n        return
      max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split('
      ') if x]\n\",1,\"    def parse_paren_group(s):\n        depth = 0\n        max_depth
      = 0\n        for c in s:\n            if c == '(':\n                depth +=
      1\n                max_depth = max(depth, max_depth)\n            else:\n                depth
      -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in
      paren_string.split(' ') if x]\n\",1,\"    def parse_paren_group(s):\n        depth
      = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n
      \               depth += 1\n                max_depth = max(depth, max_depth)\n
      \           else:\n                depth -= 1\n\n        return max_depth\n\n
      \   return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\",1,\"
      \   def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for
      c in s:\n            if c == '(':\n                depth += 1\n                max_depth
      = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return
      max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split('
      ') if x]\n\",1,\"    def parse_paren_group(s):\n        depth = 0\n        max_depth
      = 0\n        for c in s:\n            if c == '(':\n                depth +=
      1\n                max_depth = max(depth, max_depth)\n            else:\n                depth
      -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in
      paren_string.split(' ') if x]\n\",1\n\"from typing import List\n\n\ndef filter_by_substring(strings:
      List[str], substring: str) -> List[str]:\n    \"\"\"\"\"\" Filter an input list
      of strings only for ones that contain given substring\n    >>> filter_by_substring([],
      'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n
      \   ['abc', 'bacd', 'array']\n    \"\"\"\"\"\"\n\",\"    return [x for x in
      strings if substring in x]\n\",1,\"    return [x for x in strings if substring
      in x]\n\",1,\"    return [x for x in strings if substring in x]\n\",1,\"    return
      [x for x in strings if substring in x]\n\",1,\"    return [x for x in strings
      if substring in x]\n\",1\n\"from typing import List, Tuple\n\n\ndef sum_product(numbers:
      List[int]) -> Tuple[int, int]:\n    \"\"\"\"\"\" For a given list of integers,
      return a tuple consisting of a sum and a product of all the integers in a list.\n
      \   Empty sum should be equal to 0 and empty product should be equal to 1.\n
      \   >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10,
      24)\n    \"\"\"\"\"\"\n\",\"    sum_value = 0\n    prod_value = 1\n\n    for
      n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value,
      prod_value\n\",1,\"    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n
      \       sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n\",1,\"
      \   sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value
      += n\n        prod_value *= n\n    return sum_value, prod_value\n\",1,\"    sum_value
      = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value
      *= n\n    return sum_value, prod_value\n\",1,\"    sum_value = 0\n    prod_value
      = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *=
      n\n    return sum_value, prod_value\n\",1\n\"from typing import List, Tuple\n\n\ndef
      rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\"\"\" From a given
      list of integers, generate a list of rolling maximum element found until given
      moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1,
      2, 3, 3, 3, 4, 4]\n    \"\"\"\"\"\"\n\",\"    running_max = None\n    result
      = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max
      = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n
      \   return result\n\",1,\"    running_max = None\n    result = []\n\n    for
      n in numbers:\n        if running_max is None:\n            running_max = n\n
      \       else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n
      \   return result\n\",1,\"    running_max = None\n    result = []\n\n    for
      n in numbers:\n        if running_max is None:\n            running_max = n\n
      \       else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n
      \   return result\n\",1,\"    running_max = None\n    result = []\n\n    for
      n in numbers:\n        if running_max is None:\n            running_max = n\n
      \       else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n
      \   return result\n\",1,\"    running_max = None\n    result = []\n\n    for
      n in numbers:\n        if running_max is None:\n            running_max = n\n
      \       else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n
      \   return result\n\",1\n\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\"\"\"
      Test if given string is a palindrome \"\"\"\"\"\"\n    return string == string[::-1]\n\n\ndef
      make_palindrome(string: str) -> str:\n    \"\"\"\"\"\" Find the shortest palindrome
      that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find
      the longest postfix of supplied string that is a palindrome.\n    - Append to
      the end of the string reverse of a string prefix that comes before the palindromic
      suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n
      \   'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\"\"\"\n\",\"
      \   if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while
      not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix
      += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\",1,\"    if
      not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not
      is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix +=
      1\n\n    return string + string[:beginning_of_suffix][::-1]\n\",1,\"    if not
      string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n
      \       beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\",0,\"
      \   if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while
      not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix
      += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n\",0,\"    if
      not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not
      is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix +=
      1\n\n    return string + string[:beginning_of_suffix][::-1]\n\",0\n\"from typing
      import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\"\"\" Input
      are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR
      on these inputs and return result also as a string.\n    >>> string_xor('010',
      '110')\n    '100'\n    \"\"\"\"\"\"\n\",\"    def xor(i, j):\n        if i ==
      j:\n            return '0'\n        else:\n            return '1'\n\n    return
      ''.join(xor(x, y) for x, y in zip(a, b))\n\",1,\"    def xor(i, j):\n        if
      i == j:\n            return '0'\n        else:\n            return '1'\n\n    return
      ''.join(xor(x, y) for x, y in zip(a, b))\n\",1,\"    def xor(i, j):\n        if
      i == j:\n            return '0'\n        else:\n            return '1'\n\n    return
      ''.join(xor(x, y) for x, y in zip(a, b))\n\",1,\"    def xor(i, j):\n        if
      i == j:\n            return '0'\n        else:\n            return '1'\n\n    return
      ''.join(xor(x, y) for x, y in zip(a, b))\n\",1,\"    def xor(i, j):\n        if
      i == j:\n            return '0'\n        else:\n            return '1'\n\n    return
      ''.join(xor(x, y) for x, y in zip(a, b))\n\",1\n\"from typing import List, Optional\n\n\ndef
      longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\"\"\" Out of list
      of strings, return the longest one. Return the first one in case of multiple\n
      \   strings of the same length. Return None in case the input list is empty.\n
      \   >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a',
      'bb', 'ccc'])\n    'ccc'\n    \"\"\"\"\"\"\n\",\"    if not strings:\n        return
      None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if
      len(s) == maxlen:\n            return s\n\",1,\"    if not strings:\n        return
      None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if
      len(s) == maxlen:\n            return s\n\",1,\"    if not strings:\n        return
      None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if
      len(s) == maxlen:\n            return s\n\",1,\"    if not strings:\n        return
      None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if
      len(s) == maxlen:\n            return s\n\",1,\"    if not strings:\n        return
      None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if
      len(s) == maxlen:\n            return s\n\",1\n\"\n\ndef greatest_common_divisor(a:
      int, b: int) -> int:\n    \"\"\"\"\"\" Return a greatest common divisor of two
      integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25,
      15)\n    5\n    \"\"\"\"\"\"\n\",\"    while b:\n        a, b = b, a % b\n    return
      a\n\",1,\"    while b:\n        a, b = b, a % b\n    return a\n\",1,\"    while
      b:\n        a, b = b, a % b\n    return a\n\",1,\"    while b:\n        a, b
      = b, a % b\n    return a\n\",1,\"    while b:\n        a, b = b, a % b\n    return
      a\n\",1\n\"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n
      \   \"\"\"\"\"\" Return list of all prefixes from shortest to longest of the
      input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\"\"\"\n\",\"
      \   result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n
      \   return result\n\",1,\"    result = []\n\n    for i in range(len(string)):\n
      \       result.append(string[:i+1])\n    return result\n\",1,\"    result =
      []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n
      \   return result\n\",1,\"    result = []\n\n    for i in range(len(string)):\n
      \       result.append(string[:i+1])\n    return result\n\",1,\"    result =
      []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n
      \   return result\n\",1\n\r\n--21c23e61c4a26fe7ca057b8bd9cf1f60--\r\n"
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate, zstd
      Connection:
      - keep-alive
      Content-Length:
      - '20465'
      Content-Type:
      - multipart/form-data; boundary=21c23e61c4a26fe7ca057b8bd9cf1f60
      User-Agent:
      - Python-SDK/0.3.18
    method: POST
    uri: https://api.notdiamond.ai/v2/pzn/trainCustomRouter
  response:
    body:
      string: '{"preference_id":"7222acf5-39ef-450e-9691-6b024e69d1e9"}'
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-Ray:
      - 8cbf97bd9f620f4d-EWR
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Tue, 01 Oct 2024 21:37:14 GMT
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      rndr-id:
      - f0006586-6020-40f0
      x-render-origin-server:
      - uvicorn
    status:
      code: 200
      message: OK
version: 1
