"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2196],{93559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>k,default:()=>j,frontMatter:()=>x,metadata:()=>_,toc:()=>w});var a=n(85893),s=n(11151),o=n(67294);n(72389);n(85162);const r="window-content_wMkM",i="carousel_ivBY",c="carousel-inner_Kp_Z",l="carousel-item_ZkMm",d="carousel-image_BeQl",u="carousel-footer_PmSO",p="indicator-dot_joJu",m="active_bLKf";var h=n(90512);const f=e=>{let{images:t,alt:n}=e;const[s,f]=(0,o.useState)(0),g=(0,o.useRef)(null),v=()=>{if(g.current){const e=g.current.scrollLeft,t=g.current.offsetWidth,n=Math.round(e/t);f(n)}};(0,o.useEffect)((()=>{const e=g.current;if(e)return e.addEventListener("scroll",v),()=>e.removeEventListener("scroll",v)}),[]);return Array.isArray(t)&&0!==t.length?(0,a.jsxs)("div",{className:r,children:[(0,a.jsx)("div",{ref:g,className:i,children:(0,a.jsx)("div",{className:c,children:t.map(((e,t)=>(0,a.jsx)("div",{className:l,children:(0,a.jsx)("img",{src:e,alt:`${n} ${t+1}`,className:d})},t)))})}),t.length>1&&(0,a.jsx)("div",{className:u,children:t.map(((e,t)=>(0,a.jsx)("button",{className:(0,h.Z)(p,t===s&&m),onClick:()=>(e=>{if(g.current){const t=g.current.offsetWidth;g.current.scrollTo({left:e*t,behavior:"smooth"})}})(t),"aria-label":`Go to image ${t+1}`},t)))})]}):null},g=n.p+"assets/images/calls_macro-159f21be8f0fd776e3be4598ba6d7ed6.png",v=n.p+"assets/images/basic_call-747f379f599aecd0d648dcae59b29eed.png",x={},k="Calls",_={id:"guides/tracking/tracing",title:"Calls",description:"<DesktopWindow",source:"@site/docs/guides/tracking/tracing.mdx",sourceDirName:"guides/tracking",slug:"/guides/tracking/tracing",permalink:"/guides/tracking/tracing",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/tracking/tracing.mdx",tags:[],version:"current",lastUpdatedAt:1725658279e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Tracing",permalink:"/guides/tracking/"},next:{title:"Ops",permalink:"/guides/tracking/ops"}},b={},w=[{value:"Add additional attributes",id:"add-additional-attributes",level:2}];function y(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"calls",children:"Calls"}),"\n",(0,a.jsx)(f,{images:[g,v],alt:"Screenshot of many calls",title:"Weave Calls"}),"\n",(0,a.jsx)(t.p,{children:"Calls is a powerful feature in Weave that allows you to track the inputs and outputs of functions seamlessly. Follow these steps to get started:"}),"\n",(0,a.jsx)(t.p,{children:"To track specific functions, decorate them with @weave.op(). This decorator tells Weave to monitor the inputs, outputs, and any code changes for the function. Now, every call to this function will be tracked and logged. Additionally, weave tracks how functions relate by keeping track of parent and children calls and building a trace tree."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# highlight-next-line\nimport weave\nfrom openai import OpenAI\nimport requests, random\nPROMPT="""Emulate the Pokedex from early Pok\xe9mon episodes. State the name of the Pokemon and then describe it.\n        Your tone is informative yet sassy, blending factual details with a touch of dry humor. Be concise, no more than 3 sentences. """\nPOKEMON = [\'pikachu\', \'charmander\', \'squirtle\', \'bulbasaur\', \'jigglypuff\', \'meowth\', \'eevee\']\n\n# highlight-next-line\n@weave.op()\ndef get_pokemon_data(pokemon_name):\n    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name}"\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        name = data["name"]\n        types = [t["type"]["name"] for t in data["types"]]\n        species_url = data["species"]["url"]\n        species_response = requests.get(species_url)\n        evolved_from = "Unknown"\n        if species_response.status_code == 200:\n            species_data = species_response.json()\n            if species_data["evolves_from_species"]:\n                evolved_from = species_data["evolves_from_species"]["name"]\n        return {"name": name, "types": types, "evolved_from": evolved_from}\n    else:\n        return None\n\n# highlight-next-line\n@weave.op()\ndef pokedex(name: str, prompt: str) -> str:\n    client = OpenAI()\n    data = get_pokemon_data(name)\n    if not data: return "Error: Unable to fetch data"\n    response = client.chat.completions.create(\n        model="gpt-3.5-turbo",\n        messages=[\n            {"role": "system","content": prompt},\n            {"role": "user", "content": str(data)}\n        ],\n        temperature=0.7,\n        max_tokens=100,\n        top_p=1\n    )\n    return response.choices[0].message.content\n\n# highlight-next-line\nweave.init(\'intro-example\')\n# Get data for a specific Pok\xe9mon\npokemon_data = pokedex(random.choice(POKEMON), PROMPT)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"add-additional-attributes",children:"Add additional attributes"}),"\n",(0,a.jsxs)(t.p,{children:["When calling tracked functions, you can add additional metadata to the call by using the ",(0,a.jsx)(t.code,{children:"weave.attributes"})," context manager."]}),"\n",(0,a.jsxs)(t.p,{children:["For example, you can add a ",(0,a.jsx)(t.code,{children:"user_id"})," to each call and then filter calls by user. In the example below, any function called within the context manager will have the ",(0,a.jsx)(t.code,{children:"user_id"})," attribute set to ",(0,a.jsx)(t.code,{children:"lukas"})," and ",(0,a.jsx)(t.code,{children:"env"})," attribute set to ",(0,a.jsx)(t.code,{children:"production"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import weave\nimport json\nfrom openai import OpenAI\n\n@weave.op()\ndef extract_fruit(sentence: str) -> dict:\n    client = OpenAI()\n\n    response = client.chat.completions.create(\n    model="gpt-3.5-turbo-1106",\n    messages=[\n        {\n            "role": "system",\n            "content": "You will be provided with unstructured data, and your task is to parse it one JSON dictionary with fruit, color and flavor as keys."\n        },\n        {\n            "role": "user",\n            "content": sentence\n        }\n        ],\n        temperature=0.7,\n        response_format={ "type": "json_object" }\n    )\n    extracted = response.choices[0].message.content\n    return json.loads(extracted)\n\nweave.init(\'intro-example\')\nsentence = "There are many fruits that were found on the recently discovered planet Goocrux. There are neoskizzles that grow there, which are purple and taste like candy."\n\n# highlight-next-line\nwith weave.attributes({\'user_id\': \'lukas\', \'env\': \'production\'}):\n    extract_fruit(sentence)\n'})})]})}function j(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(y,{...e})}):y(e)}},85162:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});n(67294);var a=n(90512);const s={tabItem:"tabItem_Ymn6"};var o=n(85893);function r(e){let{children:t,hidden:n,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,r),hidden:n,children:t})}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>r});var a=n(67294);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);