"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4947],{89527:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var t=a(85893),i=a(11151);const o={},s="Logging media",r={id:"guides/core-types/media",title:"Logging media",description:"Weave supports logging and displaying multiple first class media types. Log images with PIL.Image and audio with wave.Wave_read either directly with the object API, or as the inputs or output of an op.",source:"@site/docs/guides/core-types/media.md",sourceDirName:"guides/core-types",slug:"/guides/core-types/media",permalink:"/guides/core-types/media",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/core-types/media.md",tags:[],version:"current",lastUpdatedAt:1729277363e3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Costs",permalink:"/guides/tracking/costs"},next:{title:"Tools & Utilities",permalink:"/guides/tools/"}},d={},p=[{value:"Images",id:"images",level:2},{value:"Audio",id:"audio",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"logging-media",children:"Logging media"}),"\n",(0,t.jsxs)(n.p,{children:["Weave supports logging and displaying multiple first class media types. Log images with ",(0,t.jsx)(n.code,{children:"PIL.Image"})," and audio with ",(0,t.jsx)(n.code,{children:"wave.Wave_read"})," either directly with the object API, or as the inputs or output of an op."]}),"\n",(0,t.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,t.jsxs)(n.p,{children:["Logging type: ",(0,t.jsx)(n.code,{children:"PIL.Image"}),". Here is an example of logging an image with the OpenAI DALL-E API:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import weave\nfrom openai import OpenAI\nimport requests\nfrom PIL import Image\n\n\nweave.init(\'image-example\')\nclient = OpenAI()\n\n@weave.op\ndef generate_image(prompt: str) -> Image:\n    response = client.images.generate(\n        model="dall-e-3",\n        prompt=prompt,\n        size="1024x1024",\n        quality="standard",\n        n=1,\n    )\n    image_url = response.data[0].url\n    image_response = requests.get(image_url, stream=True)\n    image = Image.open(image_response.raw)\n\n    # return an Image.Image object to be logged as an image\n    return image\n\ngenerate_image("a cat with a pumpkin hat")\n'})}),"\n",(0,t.jsx)(n.p,{children:"This image will be logged to weave and automatically displayed in the UI. The following is the trace view for above."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Screenshot of pumpkin cat trace view",src:a(46026).Z+"",width:"3456",height:"1614"})}),"\n",(0,t.jsx)(n.h2,{id:"audio",children:"Audio"}),"\n",(0,t.jsxs)(n.p,{children:["Logging type: ",(0,t.jsx)(n.code,{children:"wave.Wave_read"}),". Here is an example of logging an audio file using openai's speech generation API."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import weave\nfrom openai import OpenAI\nimport wave\n\n\nweave.init("audio-example")\nclient = OpenAI()\n\n\n@weave.op\ndef make_audio_file_streaming(text: str) -> wave.Wave_read:\n    with client.audio.speech.with_streaming_response.create(\n        model="tts-1",\n        voice="alloy",\n        input=text,\n        response_format="wav",\n    ) as res:\n        res.stream_to_file("output.wav")\n\n    # return a wave.Wave_read object to be logged as audio\n    return wave.open("output.wav")\n\nmake_audio_file_streaming("Hello, how are you?")\n'})}),"\n",(0,t.jsx)(n.p,{children:"This audio will be logged to weave and automatically displayed in the UI, with an audio player. The player can be expanded to view the raw audio waveform, in addition to a download button."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Screenshot of audio trace view",src:a(81325).Z+"",width:"3456",height:"1240"})})]})}function c(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},81325:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/audio-trace-ab51ad828731793ea849244477990a50.png"},46026:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/cat-pumpkin-trace-8669b2bb53dfa5c17c37e04e42cf24ef.png"},11151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>s});var t=a(67294);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);