"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3694],{58516:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var s=r(85893),a=r(11151);const i={sidebar_label:"query"},o="weave.trace_server.interface.query",t={id:"reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query",title:"weave.trace_server.interface.query",description:"This file contains the interface definition for the Trace Server Query model. It",source:"@site/docs/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query.md",sourceDirName:"reference/python-sdk/weave/trace_server/interface",slug:"/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query",permalink:"/weave/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/reference/python-sdk/weave/trace_server/interface/weave.trace_server.interface.query.md",tags:[],version:"current",frontMatter:{sidebar_label:"query"},sidebar:"pythonSdkSidebar",previous:{title:"util",permalink:"/weave/reference/python-sdk/weave/trace/weave.trace.util"},next:{title:"remote_http_trace_server",permalink:"/weave/reference/python-sdk/weave/trace_server/weave.trace_server.remote_http_trace_server"}},l={},c=[{value:"Classes",id:"classes",level:2},{value:"<kbd>class</kbd> <code>AndOperation</code>",id:"class-andoperation",level:2},{value:"<kbd>class</kbd> <code>ContainsOperation</code>",id:"class-containsoperation",level:2},{value:"<kbd>class</kbd> <code>ContainsSpec</code>",id:"class-containsspec",level:2},{value:"<kbd>class</kbd> <code>ConvertOperation</code>",id:"class-convertoperation",level:2},{value:"<kbd>class</kbd> <code>ConvertSpec</code>",id:"class-convertspec",level:2},{value:"<kbd>class</kbd> <code>EqOperation</code>",id:"class-eqoperation",level:2},{value:"<kbd>class</kbd> <code>GetFieldOperator</code>",id:"class-getfieldoperator",level:2},{value:"<kbd>class</kbd> <code>GtOperation</code>",id:"class-gtoperation",level:2},{value:"<kbd>class</kbd> <code>GteOperation</code>",id:"class-gteoperation",level:2},{value:"<kbd>class</kbd> <code>LiteralOperation</code>",id:"class-literaloperation",level:2},{value:"<kbd>class</kbd> <code>NotOperation</code>",id:"class-notoperation",level:2},{value:"<kbd>class</kbd> <code>OrOperation</code>",id:"class-oroperation",level:2},{value:"<kbd>class</kbd> <code>Query</code>",id:"class-query",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"weavetrace_serverinterfacequery",children:"weave.trace_server.interface.query"}),"\n",(0,s.jsx)(n.p,{children:"This file contains the interface definition for the Trace Server Query model. It\nis heavily inspired by the MongoDB query language, but is a subset of the full\nMongoDB query language. In particular, we have made the following\nsimplifications:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'We only support the "aggregation" operators, not the "query" operators. This is\npurely for simplicity and because the "aggregation" operators are more powerful.\nThe Mongo docs language has evolved over time and the primary query language\nis column-oriented. However, the more expressive aggregation language can be\nused for both direct queries, but also for column comparison and\ncalculations. We can add support for the "query" operators in the future if\nneeded.'}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"We only support a subset of the operators / shorthand forms for now. We can add\nmore operators in the future as needed."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'One notable omission here is the lack of support for "$field" as a shorthand for\nthe "getField"  operator.'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["We have ",(0,s.jsx)(n.em,{children:"added"})," a ",(0,s.jsx)(n.code,{children:"$contains"})," operator which is not in the MongoDB query\nlanguage. This is a simple substring match operator."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h1,{id:"api-overview",children:"API Overview"}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-andoperation",children:(0,s.jsx)(n.code,{children:"query.AndOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-containsoperation",children:(0,s.jsx)(n.code,{children:"query.ContainsOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-containsspec",children:(0,s.jsx)(n.code,{children:"query.ContainsSpec"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-convertoperation",children:(0,s.jsx)(n.code,{children:"query.ConvertOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-convertspec",children:(0,s.jsx)(n.code,{children:"query.ConvertSpec"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-eqoperation",children:(0,s.jsx)(n.code,{children:"query.EqOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-getfieldoperator",children:(0,s.jsx)(n.code,{children:"query.GetFieldOperator"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-gtoperation",children:(0,s.jsx)(n.code,{children:"query.GtOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-gteoperation",children:(0,s.jsx)(n.code,{children:"query.GteOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-literaloperation",children:(0,s.jsx)(n.code,{children:"query.LiteralOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-notoperation",children:(0,s.jsx)(n.code,{children:"query.NotOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-oroperation",children:(0,s.jsx)(n.code,{children:"query.OrOperation"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#class-query",children:(0,s.jsx)(n.code,{children:"query.Query"})})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-andoperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"AndOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class AndOperation(BaseModel):\n    and_: typing.List["Operand"] = Field(alias="$and")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-containsoperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"ContainsOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ContainsOperation(BaseModel):\n    contains_: "ContainsSpec" = Field(alias="$contains")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-containsspec",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"ContainsSpec"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ContainsSpec(BaseModel):\n    input: "Operand"\n    substr: "Operand"\n    case_insensitive: typing.Optional[bool] = False\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-convertoperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"ConvertOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ConvertOperation(BaseModel):\n    convert_: "ConvertSpec" = Field(alias="$convert")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-convertspec",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"ConvertSpec"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ConvertSpec(BaseModel):\n    input: "Operand"\n    # Subset of https://www.mongodb.com/docs/manual/reference/bson-types/#std-label-bson-types\n    to: CastTo\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-eqoperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"EqOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class EqOperation(BaseModel):\n    eq_: typing.Tuple["Operand", "Operand"] = Field(alias="$eq")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-getfieldoperator",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"GetFieldOperator"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class GetFieldOperator(BaseModel):\n    # Tim: We will likely want to revisit this before making it public. Here are some concerns:\n    # 1. Mongo explicitly says that `getField` is used to access fields without dot notation - this\n    #    is not how we are handling it here - we are using dot notation - this could be resolved by\n    #    supporting the `$field.with.path` shorthand.\n    # 2. As Jamie pointed out, the parsing of this field is not very robust and susceptible to issues when:\n    #    - The field part name contains a dot\n    #    - The field part name is a valid integer (currently interpreted as a list index)\n    #    - The field part name contains a double quote (will result in failed lookup - see `_quote_json_path` in `clickhouse_trace_server_batched.py`)\n    #    These issues could be resolved by using an alternative syntax (perhaps backticks, square brackets, etc.). However\n    #    this would diverge from the current Mongo syntax.\n    get_field_: str = Field(alias="$getField")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-gtoperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"GtOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class GtOperation(BaseModel):\n    gt_: typing.Tuple["Operand", "Operand"] = Field(alias="$gt")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-gteoperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"GteOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class GteOperation(BaseModel):\n    gte_: typing.Tuple["Operand", "Operand"] = Field(alias="$gte")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-literaloperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"LiteralOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class LiteralOperation(BaseModel):\n    literal_: typing.Union[\n        str,\n        int,\n        float,\n        bool,\n        dict[str, "LiteralOperation"],\n        list["LiteralOperation"],\n        None,\n    ] = Field(alias="$literal")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-notoperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"NotOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class NotOperation(BaseModel):\n    not_: typing.Tuple["Operand"] = Field(alias="$not")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-oroperation",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"OrOperation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class OrOperation(BaseModel):\n    or_: typing.List["Operand"] = Field(alias="$or")\n\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"class-query",children:[(0,s.jsx)("kbd",{children:"class"})," ",(0,s.jsx)(n.code,{children:"Query"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Query(BaseModel):\n    # Here, we use `expr_` to match the MongoDB query language\'s "aggregation" operator syntax.\n    # This is certainly a subset of the full MongoDB query language, but it is a good starting point.\n    # https://www.mongodb.com/docs/manual/reference/operator/query/expr/#mongodb-query-op.-expr\n    expr_: "Operation" = Field(alias="$expr")\n    # In the future, we could have other top-level Query Operators as described here:\n    # https://www.mongodb.com/docs/manual/reference/operator/query/\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>t,a:()=>o});var s=r(67294);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);