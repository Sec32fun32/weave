name: cypress

on:
  push:

jobs:
  # create-venv:
  #   name: Create Python venv
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup Python version
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.9.7
  #     - uses: syphar/restore-virtualenv@v1
  #       id: cache-virtualenv

  #     - name: Install package
  #       if: steps.cache-virtualenv.outputs.cache-hit != 'true'
  #       run: pip install .
  #     - name: Install test dependencies
  #       if: steps.cache-virtualenv.outputs.cache-hit != 'true'
  #       run: pip install -r requirements.test.txt

  nbmake:
    name: Run notebooks with nbmake
    # needs: create-venv
    runs-on: self-hosted
    container: wandb/weave-test:latest
    steps:
      - uses: actions/checkout@v2
      # - name: Setup Python version
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.9.7
      # - uses: syphar/restore-virtualenv@v1
      - run: pwd
      - run: source /root/venv/bin/activate

      - name: Run notebooks
        run: pytest -n=auto --nbmake --overwrite examples/vis
      - name: Upload executed notebooks
        uses: actions/upload-artifact@v3
        with:
          name: notebooks
          path: examples

  cypress-run:
    name: Run UI tests with Cypress
    needs: nbmake
    runs-on: self-hosted
    container: wandb/weave-test:latest
    strategy:
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2]
    steps:
      - uses: actions/checkout@v2
      # - name: Setup Python version
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.9.7
      # - uses: syphar/restore-virtualenv@v1

      - name: Download executed notebooks
        uses: actions/download-artifact@v3
        with:
          name: notebooks

      - name: Start Jupyter notebook server
        run: nohup sh weave_server.sh &
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          working-directory: ./integration_test
          record: true
          parallel: true
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # after the test run completes
      # store videos and any screenshots
      # NOTE: screenshots will be generated only if E2E test failed
      # thus we store screenshots only on failures
      # Alternative: create and commit an empty cypress/screenshots folder
      # to always have something to upload
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: integration_test/cypress/screenshots
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: integration_test/tcypress/videos
